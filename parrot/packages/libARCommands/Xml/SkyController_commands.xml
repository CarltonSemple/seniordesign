<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
-->

<!--
 Important notes :
 ALWAYS ADD NEW THINGS AT THE END OF THE PARENT TAG !
 NEVER MODIFY EXISTING class/command/arg !
 
 Comments are mandatory for all classes/commands/args
 For each comment : 1st line will be used as brief (if applicable)
 Other lines will be used as complete desc
 
 How to add a new class :
 <class name="MyNewClassName" >           | No spaces ! [A-Za-z0-9_]
 Comment about the class                | Inlcuded in Doxygen doc
 <cmd> ... </cmd>                       | List of commands
 <cmd> ... </cmd>
 </class>
 
 How to add a new command (without args) to a class :
 <cmd name="MyNewCommandName" >           | No spaces ! [A-Za-z0-9_]
 Comment about the command              | Included in Doxygen doc
 </cmd>
 
 How to add a new command (with args) to a class :
 <cmd name="MyNewCommandWithArgs" >       | No spaces ! [A-Za-z0-9_]
 Comment about the command              | Included in Doxygen doc
 <arg name="argName" type="argType" >   | Repeat for each arg
 Comment about the arg                | argName must be a valid C variable name
 </arg>                                 | argType must be a valid type (see below)
 ...                                    | Comment included in Doxygen doc
 </cmd>
 
 List of valid types (associated C type) :
 -  i8 /  u8 : signed/unsigned  8 bit integer ([u]int8_t)
 - i16 / u16 : signed/unsigned 16 bit integer ([u]int16_t)
 - i32 / u32 : signed/unsigned 32 bit integer ([u]int32_t)
 - i64 / u64 : signed/unsigned 64 bit integer ([u]int64_t)
 -     float : IEEE-754 single precision floating point number (float)
 -    double : IEEE-754 double precision floating point number (double)
 -    string : NULL-terminated UTF-8 String. (char *)
 -->


<project id="4">
    All SkyController-only commands
    
    <class name="WifiState" id="0">
        Wifi state
        <cmd name="WifiList" listtype="MAP">
            Return the available wifi list
            <arg name="bssid" type="string">
                Wifi bssid
            </arg>
            <arg name="ssid" type="string">
                Wifi ssid
            </arg>
            <arg name="secured" type="u8">
                Is wifi secured by passphrase
            </arg>
            <arg name="saved" type="u8">
                Is wifi saved in terminal
            </arg>
            <arg name="rssi" type="i32">
                Wifi rssi
            </arg>
            <arg name="frequency" type="i32">
                Wifi frequency
            </arg>
        </cmd>
        
        <cmd name="ConnexionChanged">
            Return connexion status
            <arg name="ssid" type="string">
                Wifi ssid
            </arg>
            <arg name="status" type="enum">
                Wifi status
                <enum name="connected">
                    Connected
                </enum>
                <enum name="error">
                    Error
                </enum>
                <enum name="disconnected">
                    Disconnected
                </enum>
            </arg>
        </cmd>

        <cmd name="WifiAuthChannelListChanged" listtype="LIST">
            Notify of an Authorized Channel
            <arg name="band" type="enum">
                The band of this channel : 2.4 GHz or 5 GHz
                <enum name="2_4ghz">
                    2.4 GHz band
                </enum>
                <enum name="5ghz">
                    5 GHz band
                </enum>
            </arg>
            <arg name="channel" type="u8">
                The authorized channel
            </arg>
            <arg name="in_or_out" type="u8">
                Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
            </arg>
        </cmd>

        <cmd name="AllWifiAuthChannelChanged">
            Notify the end of the list of Authorized wifi Channel
        </cmd>
        <cmd name="WifiSignalChanged">
            State of the wifi signal
            <arg name="level" type="u8">
                Level of the signal. Levels are from 0 to 5. 0 is an unknown value. 1 is a weak wifi signal, 5 is the best.
            </arg>
        </cmd>
    </class>

    <class name="Wifi" id="1">
        Wifi
        <cmd name="RequestWifiList">
            Request wifi list
        </cmd>

        <cmd name="RequestCurrentWifi">
            Request current connected wifi
        </cmd>
        
        <cmd name="ConnectToWifi">
            Connect to wifi
            <arg name="bssid" type="string">
                Wifi bssid
            </arg>
            <arg name="ssid" type="string">
                Wifi ssid
            </arg>
            <arg name="passphrase" type="string">
                Wifi passphrase
            </arg>
        </cmd>

        <cmd name="ForgetWifi">
            Forget wifi
            <arg name="ssid" type="string">
                Wifi ssid
            </arg>
        </cmd>

        <cmd name="WifiAuthChannel">
            Controller inquire the list of authorized wifi channels
        </cmd>
    </class>
    
    <class name="Device" id="2">
        Device Connection commands
        
         <cmd name="RequestDeviceList">
            Request Device list
        </cmd>

        <cmd name="RequestCurrentDevice">
            Request current connected Device
        </cmd>
        
        <cmd name="ConnectToDevice">
            ask to connect to a device
            <arg name="deviceName" type="string">
                Device name
            </arg>
        </cmd>
    </class>
    
    <class name="DeviceState" id="3">
        Device state
        
        <cmd name="DeviceList" listtype="LIST">
            Return the available Device list
            <arg name="name" type="string">
                Device name
            </arg>
        </cmd>
        
        <cmd name="ConnexionChanged">
            Return device connexion status
            <arg name="status" type="enum">
                Wifi status to Device
                <enum name="notConnected">
                    Not Connected
                </enum>
                <enum name="connecting">
                    Connecting to Device
                </enum>
                
                <enum name="connected">
                    Connected to Device
                </enum>
                
                <enum name="disconnecting">
                    Disconnecting from Device
                </enum>
            </arg>
            <arg name="deviceName" type="string">
                Device name
            </arg>
            <arg name="deviceProductID" type="u16">
                Device name
            </arg>
        </cmd>        
    </class>
    
    <class name="Settings" id="4">
        Settings commands
        <cmd name="AllSettings" timeout="RETRY">
            Get all product settings, the product must send all settings
        </cmd>
        <cmd name="Reset">
            Reset all settings
        </cmd>
        
    </class>
    
    <class name="SettingsState" id="5">
        Settings state from product
        <cmd name="AllSettingsChanged">
            State sent when all settings has been sent
        </cmd>
        
        <cmd name="ResetChanged">
            State sent when all settings has been resetting
        </cmd>
        
        <cmd name="ProductSerialChanged">
            Product serial number
            <arg name="serialNumber" type="string">
                Serial number (hexadecimal value)
            </arg>
        </cmd>

        <cmd name="ProductVariantChanged">
          Product variant of SkyController
          <arg name="variant" type="enum">
            Variant of the product
            <enum name="bebop">
              SkyController of the bebop generation.
              (Bebop battery, and original key layout)
            </enum>
            <enum name="bebop2">
              SkyController of the bebop2 generation.
              (Bebop2 battery, and updated key layout)
            </enum>
          </arg>
        </cmd>
    </class>
    
    <class name="Common" id="6">
        Common commands
        <cmd name="AllStates" timeout="RETRY">
            Get all product states
        </cmd>
    </class>
    
    <class name="CommonState" id="7">
        Common state from product
        <cmd name="AllStatesChanged">
            State sent when all product states has been sent
        </cmd>
    </class>

    <class name="SkyControllerState" id="8">
        Sky Controller states
        <cmd name="BatteryChanged">
            State sent when SkyController battery has changed
            <arg name="percent" type="u8">
                SkyController battery
            </arg>
        </cmd>

        <cmd name="GpsFixChanged">
            State sent when SkyController gps fix has changed
            <arg name="fixed" type="u8">
                SkyController fixed
            </arg>
        </cmd>
    
		<cmd name="GpsPositionChanged">
		  State sent when the SkyController gps position has changed
		  <arg name="latitude" type="double">
			SkyController latitude (500. if not available)
		  </arg>
		  <arg name="longitude" type="double">
			SkyController longiture (500. if not available)
		  </arg>
		  <arg name="altitude" type="double">
			Altitude (in meters) above sea level
			Only meaningful if latitude and longiture are available
		  </arg>
		  <arg name="heading" type="float">
			SkyController heading relative to magnetic north (500.f if not available)
		  </arg>
		</cmd>

    </class>

    <class name="AccessPointSettings" id="9">
        AccessPoint settings commands
        <cmd name="AccessPointSSID">
            Set AccessPoint SSID
            <arg name="ssid" type="string">
                AccessPoint SSID
            </arg>
        </cmd>
        <cmd name="AccessPointChannel">
            Set AccessPoint Channel
            <arg name="channel" type="u8">
                AccessPoint Channel
            </arg>
        </cmd>
        <cmd name="WifiSelection">
            Set AccessPoint Band and Channel
            <arg name="type" type="enum">
                The type of wifi selection (only manual at the moment)
                <enum name="manual">
                    Manual selection
                </enum>
            </arg>
            <arg name="band" type="enum">
                The allowed band : 2.4 Ghz or 5 Ghz
                <enum name="2_4ghz">
                    2.4 GHz band
                </enum>
                <enum name="5ghz">
                    5 GHz band
                </enum>
            </arg>
            <arg name="channel" type="u8">
                The channel
            </arg>
        </cmd>
    </class>
    
    <class name="AccessPointSettingsState" id="10">
        AccessPoint settings state from product
        <cmd name="AccessPointSSIDChanged">
            State sent when AccessPoint ssid has been sent
            <arg name="ssid" type="string">
                AccessPoint SSID
            </arg>
        </cmd>
        <cmd name="AccessPointChannelChanged">
            State sent when AccessPoint channel has been sent
            <arg name="channel" type="u8">
                AccessPoint Channel
            </arg>
        </cmd>
        <cmd name="WifiSelectionChanged">
            Wifi selection from product
            <arg name="type" type="enum">
                The type of wifi selection (only manual at the moment)
                <enum name="manual">
                    Manual selection
                </enum>
            </arg>
            <arg name="band" type="enum">
                The allowed band : 2.4 Ghz or 5 Ghz
                <enum name="2_4ghz">
                    2.4 GHz band
                </enum>
                <enum name="5ghz">
                    5 GHz band
                </enum>
            </arg>
            <arg name="channel" type="u8">
                The channel
            </arg>
        </cmd>
    </class>

    <class name="Camera" id="11">
        Ask the drone to move camera
        <cmd name="ResetOrientation">
            Reset pan and tilt to center
        </cmd>
    </class>

	<class name="GamepadInfos" id="18">
	  Request infos about the gamepad of the SkyController
	  <cmd name="getGamepadControls">
		Asks the SkyController to send the button and axis list
	  </cmd>
	</class>

	<class name="GamepadInfosState" id="19">
	  Informations about the gamepad of the SkyController
	  <cmd name="gamepadControl" listtype="LIST">
		Describe an existing button or axis of the gamepad
		<arg name="type" type="enum">
		  The type (axis/button) of the control
		  <enum name="axis">
			An analog axis (one of the 4 joysticks)
		  </enum>
		  <enum name="button">
			A button (including small joystick clicks)
		  </enum>
		</arg>
		<arg name="id" type="i32">
		  The button or axis id
		  @note A button and an axis can have the same ID, but their type is different
		</arg>
		<arg name="name" type="string">
		  Display name for the control
		</arg>
	  </cmd>

	  <cmd name="allGamepadControlsSent">
		Sent by the SkyController after sending its last 'gamepadControl' command
	  </cmd>
	</class>

	<class name="ButtonMappings" id="12">
	  Controls the button mappings of the SkyController

	  <cmd name="getCurrentButtonMappings">
		Asks the SkyController to send its current button mapping
	  </cmd>

	  <cmd name="getAvailableButtonMappings">
		Asks the SkyController to send the possible mappings for each button
	  </cmd>

	  <cmd name="setButtonMapping">
		Set a button mapping to the SkyController
		@note replaces previous mapping for the given key
		<arg name="key_id" type="i32">
		  The keycode to map
		</arg>
		<arg name="mapping_uid" type="string">
		  The mapping to associate with the key
		</arg>
	  </cmd>

	  <cmd name="defaultButtonMapping">
		Asks the SkyController to reset the button mappings to the default value
	  </cmd>
	</class>

	<class name="ButtonMappingsState" id="13">
	  State of the button mappings of the SkyController

	  <cmd name="currentButtonMappings" listtype="MAP">
		Sent by the SkyController each time a mapping changes
		<arg name="key_id" type="i32">
		  The keycode mapped
		</arg>
		<arg name="mapping_uid" type="string">
		  The mapping associated
		</arg>
	  </cmd>

	  <cmd name="allCurrentButtonMappingsSent">
		Sent by the SkyController after sending its last 'currentButtonMappings' command
	  </cmd>

	  <cmd name="availableButtonMappings" listtype="MAP">
		Sent after a 'getAvailableButtonMappings' request
		<arg name="mapping_uid" type="string">
		  The mapping UID (used in communication with the SkyController)
		</arg>
		<arg name="name" type="string">
		  Display name for the user
		</arg>
	  </cmd>

	  <cmd name="allAvailableButtonsMappingsSent">
		Sent by the SkyController after sending its last 'availableButtonMappings' command
	  </cmd>

	</class>

	<class name="AxisMappings" id="14">
	  Controls the axis mappings of the SkyController

	  <cmd name="getCurrentAxisMappings">
		Asks the SkyController to send its current axis mapping
	  </cmd>

	  <cmd name="getAvailableAxisMappings">
		Asks the SkyController to send the possible mappings for each axis
	  </cmd>

	  <cmd name="setAxisMapping">
		Set a axis mapping to the SkyController
		@note replaces previous mapping for the given axis
		<arg name="axis_id" type="i32">
		  The axiscode to map
		</arg>
		<arg name="mapping_uid" type="string">
		  The mapping to associate with the axis
		</arg>
	  </cmd>

	  <cmd name="defaultAxisMapping">
		Asks the SkyController to reset the axis mappings to the default value
	  </cmd>
	</class>

	<class name="AxisMappingsState" id="15">
	  State of the axis mappings of the SkyController

	  <cmd name="currentAxisMappings" listtype="MAP">
		Sent by the SkyController each time a mapping changes
		<arg name="axis_id" type="i32">
		  The axiscode mapped
		</arg>
		<arg name="mapping_uid" type="string">
		  The mapping associated
		</arg>
	  </cmd>

	  <cmd name="allCurrentAxisMappingsSent">
		Sent by the SkyController after sending its last 'currentAxisMappings' command
	  </cmd>

	  <cmd name="availableAxisMappings" listtype="MAP">
		Sent after a 'getAvailableAxisMappings' request
		<arg name="mapping_uid" type="string">
		  The mapping UID (used in communication with the SkyController)
		</arg>
		<arg name="name" type="string">
		  Display name for the user
		</arg>
	  </cmd>

	  <cmd name="allAvailableAxisMappingsSent">
		Sent by the SkyController after sending its last 'availableAxisMappings' command
	  </cmd>

	</class>

	<class name="AxisFilters" id="16">
	  Controls the axis filters of the SkyController

	  <cmd name="getCurrentAxisFilters">
		Asks the SkyController to send its current axis filters
	  </cmd>

	  <cmd name="getPresetAxisFilters">
		Asks the SkyController to send the preset filters
	  </cmd>

	  <cmd name="setAxisFilter">
		Set an axis filter to the SkyController
		@note replaces previous filter for the given axis
		<arg name="axis_id" type="i32">
		  The axiscode to filter
		</arg>
		<arg name="filter_uid_or_builder" type="string">
		  The mapping preset to associate with the axis
		  (Or a string to build a new one)
		</arg>
	  </cmd>

	  <cmd name="defaultAxisFilters">
		Asks the SkyController to reset the axis filters to the default value
	  </cmd>
	</class>

	<class name="AxisFiltersState" id="17">
	  State of the axis filters of the SkyController

	  <cmd name="currentAxisFilters" listtype="MAP">
		Sent by the SkyController each time a filter changes
		<arg name="axis_id" type="i32">
		  The axiscode filtered
		</arg>
		<arg name="filter_uid_or_builder" type="string">
		  The filter associated
		</arg>
	  </cmd>

	  <cmd name="allCurrentFiltersSent">
		Sent by the SkyController after sending its last 'currentAxisFilters' command
	  </cmd>

	  <cmd name="presetAxisFilters" listtype="MAP">
		Sent after a 'getPresetAxisFilters' request
		<arg name="filter_uid" type="string">
		  The filter UID (used in communication with the SkyController)
		</arg>
		<arg name="name" type="string">
		  Display name for the user
		</arg>
	  </cmd>

	  <cmd name="allPresetFiltersSent">
		Sent by the SkyController after sending its last 'presetAxisFilters' command
	  </cmd>

	</class>

	<class name="CoPiloting" id="20">
	  Configuration of the co-piloting feature
	  <cmd name="setPilotingSource">
		Set the SkyController piloting source
		<arg name="source" type="enum">
		  The source
		  <enum name="SkyController">
			Use the SkyController joysticks
		  </enum>
		  <enum name="Controller">
			Use the Tablet (or smartphone, or whatever) controls
			Disables the SkyController joysticks
		  </enum>
		</arg>
	  </cmd>
	</class>

	<class name="CoPilotingState" id="21">
	  State of the co-piloting feature
	  <cmd name="pilotingSource">
		Source of the piloting commands
		<arg name="source" type="enum">
		  The source
		  <enum name="SkyController">
			Use the SkyController joysticks
		  </enum>
		  <enum name="Controller">
			Use the Tablet (or smartphone, or whatever) controls
			Disables the SkyController joysticks
		  </enum>
		</arg>
	  </cmd>
	</class>

	<class name="Calibration" id="22">
	  Commands related to the SkyController sensors calibration
	  <cmd name="enableMagnetoCalibrationQualityUpdates">
		Asks the SkyController to send (or not) the magneto calibration quality updates.
		The MagnetoCalibrationState will always be sent when the status parameters changes,
		regardless of this setting.
		<arg name="enable" type="u8">
		  Flag to enable the feature.
		  1 = enable quality updates
		  0 = disable quality updates
		</arg>
	  </cmd>
	</class>

	<class name="CalibrationState" id="23">
	  State of the SkyController calibration
	  <cmd name="MagnetoCalibrationState">
		The current state of the magnetometer calibration
		<arg name="status" type="enum">
		  The global status of the calibration
		  <enum name="Unreliable">
			A calibration is needed
		  </enum>
		  <enum name="Assessing">
			A calibration is applied, but still need to be checked
		  </enum>
		  <enum name="Calibrated">
			The sensor is properly calibrated
		  </enum>
		</arg>
		<arg name="X_Quality" type="u8">
		  Calibration quality on X axis.
		  0 is bad, 255 is perfect
		</arg>
		<arg name="Y_Quality" type="u8">
		  Calibration quality on Y axis.
		  0 is bad, 255 is perfect
		</arg>
		<arg name="Z_Quality" type="u8">
		  Calibration quality on Z axis.
		  0 is bad, 255 is perfect
		</arg>
	  </cmd>
	  <cmd name="MagnetoCalibrationQualityUpdatesState">
		State of the "send calibration state on quality change" setting.
		<arg name="enabled" type="u8">
		  Flag (is the feature enabled).
		  1 = The skycontroller sends updated when quality is updated
		  0 = The skycontroller only sent updated when state is updated
		</arg>
	  </cmd>
	</class>

	<class name="ButtonEvents" id="24">
	  Events sent on SkyController button presses.
	  These events are sent under certain conditions only.
	  <cmd name="Settings">
		Event sent when the settings button is pressed.
		This event is sent only when the sky controller is connected
		to a drone.
	  </cmd>
	</class>
</project>
